package {{.Meta.service}}_gorm

import (
	"context"
	"fmt"
	"github.com/wirnat/aksara-cli/example/model"
	"github.com/wirnat/aksara-cli/modules/{{.Meta.service}}/{{.Meta.service}}_request"
	"gorm.io/gorm"
)

type {{.Meta.service}}Gorm struct {
	db gorm.DB
}

func New(db gorm.DB) *{{.Meta.service}}Gorm {
	return &{{.Meta.service}}Gorm{db: db}
}

func (c {{.Meta.service}}Gorm) Fetch(ctx context.Context, param {{.Meta.service}}_request.{{.ModelName}}Param) (res []model.{{.ModelName}}, err error) {
	filter(&c.db, param)
	err = c.db.Find(&res).Error
	return
}

func (c {{.Meta.service}}Gorm) Get(ctx context.Context, param {{.Meta.service}}_request.{{.ModelName}}Param) (res model.{{.ModelName}}, err error) {
	filter(&c.db, param)
	err = c.db.First(&res).Error
	return
}

func (c {{.Meta.service}}Gorm) Store(ctx context.Context, {{.Meta.service}} *model.{{.ModelName}}) error {
	db, err := getTx(ctx)
	if err == nil {
		c.db = *db
	}

	return db.Create(&{{.Meta.service}}).Error
}

func (c {{.Meta.service}}Gorm) Update(ctx context.Context, {{.Meta.service}} *model.{{.ModelName}}, condition ...{{.Meta.service}}_request.{{.ModelName}}Param) error {
	db, err := getTx(ctx)
	if err == nil {
		c.db = *db
	}

	return db.Updates(&{{.Meta.service}}).Error
}

func (c {{.Meta.service}}Gorm) Delete(ctx context.Context, uuid string) error {
	db, err := getTx(ctx)
	if err == nil {
		c.db = *db
	}

	return db.Delete(model.{{.ModelName}}{}, fmt.Sprintf("uuid=%v", uuid)).Error
}
