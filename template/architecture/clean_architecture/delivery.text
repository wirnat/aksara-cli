package {{.Meta.service}}_rest

import (
	"github.com/labstack/echo/v4"
	"{{.ModuleName}}/modules/{{.Meta.service}}/{{.Meta.service}}_repository"
	"{{.ModuleName}}/modules/{{.Meta.service}}/{{.Meta.service}}_request"
	"{{.ModuleName}}/modules/{{.Meta.service}}/{{.Meta.service}}_usecase"
	"github.com/wirnat/aksara-cli/util/query_reader"
)

type {{.Model}}Rest struct {
	{{.Model}}Interactor {{.Meta.service}}_usecase.{{.Model}}Usecase
	{{.Model}}FetchRepo  {{.Meta.service}}_repository.{{.Model}}Fetch
	{{.Model}}GetRepo    {{.Meta.service}}_repository.{{.Model}}Get
	{{.Model}}DeleteRepo {{.Meta.service}}_repository.{{.Model}}Delete
}

func (r {{.Model}}Rest) Show(ctx echo.Context) error {
	param := {{.Meta.service}}_request.{{.Model}}Param{}
	_uuid := ctx.Param("uuid")
	param.UUID = &_uuid

	res, err := r.{{.Model}}GetRepo.Get(ctx.Request().Context(), param)
	if err != nil {
		return err
	}

	return ctx.JSON(200, res)
}

func (r {{.Model}}Rest) Find(ctx echo.Context) error {
	param := {{.Meta.service}}_request.{{.Model}}Param{}
	err := query_reader.Bind(ctx, &param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}FetchRepo.Fetch(ctx.Request().Context(), param)
	if err != nil {
		return err
	}

	return ctx.JSON(200, res)
}

func (r {{.Model}}Rest) Store(ctx echo.Context) error {
	param := new({{.Meta.service}}_request.{{.Model}}Store)
	err := ctx.Bind(param)
	if err != nil {
		return err
	}

	err = ctx.Validate(param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}Interactor.Store(ctx.Request().Context(), *param)
	if err != nil {
		return err
	}
	return ctx.JSON(200, res)
}
