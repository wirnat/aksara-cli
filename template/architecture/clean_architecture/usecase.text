package {{.Meta.service}}_usecase_v1

import (
	"context"
	"{{.ModuleName}}/example/model"
	"{{.ModuleName}}/{{.Meta.service}}/{{.Meta.service}}_repository"
	"{{.ModuleName}}/{{.Meta.service}}/{{.Meta.service}}_request"
)

type {{.Meta.service}}Usecase struct {
	{{.Meta.service}}Store  {{.Meta.service}}_repository.{{.Model}}Store
	{{.Meta.service}}Update {{.Meta.service}}_repository.{{.Model}}Update}

func New{{.Model}}Usecase({{.Meta.service}}Store {{.Meta.service}}_repository.{{.Model}}Store, {{.Meta.service}}Update {{.Meta.service}}_repository.{{.Model}}Update) *{{.Meta.service}}Usecase {
	return &{{.Meta.service}}Usecase{
	{{- .Meta.service}}Store: {{.Meta.service}}Store,
	{{- .Meta.service}}Update: {{.Meta.service}}Update}
}

func (u {{.Meta.service}}Usecase) Store(ctx context.Context, param {{.Meta.service}}_request.{{.Model}}Store) (r model.{{.Model}}, err error) {
	{{- range $m:=.ModelFields }}
     r.{{$m.Name}} = param.{{$m.Name}}
    {{- end}}

	err = u.{{.Meta.service}}Store.Store(ctx, &r)
	return
}

func (u {{.Meta.service}}Usecase) Update(ctx context.Context, param {{.Meta.service}}_request.{{.Model}}Store) (r model.{{.Model}}, err error) {
	{{- range $m:=.ModelFields }}
     r.{{$m.Name}} = param.{{$m.Name}}
    {{- end}}

	err = u.{{.Meta.service}}Store.Store(ctx, &r)
	return
}
